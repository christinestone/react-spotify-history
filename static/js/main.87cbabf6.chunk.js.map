{"version":3,"sources":["components/TopArtists/TopArtists.js","components/RecentlyPlayed/TableItem.js","components/RecentlyPlayed/RecentlyPlayed.js","components/Navigation/Navigation.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["TopArtists","state","artists","fetch","then","res","json","data","setState","catch","error","console","log","this","className","map","index","imageUrl","artist","genres","key","src","alt","height","width","join","Component","TableItem","item","played_at","image","track_name","timestamp","datePlayed","Date","outputFormat","isToday","isThisWeek","format","formatTime","RecentlyPlayed","recentlyPlayed","e","Navigation","to","path","Login","isSignedIn","href","App","isUserAuthorized","URLSearchParams","window","location","search","has","loading","redirect","status","Error","err","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87cbabf6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TopArtists extends Component {\n    constructor() {\n        super();\n        this.state = {\n          artists: []\n        };\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:5000/favourites')\n          .then(res => res.json())\n          .then(data => {\n            this.setState({\n              artists: data\n            });\n          })\n          .catch(error => console.log(error));\n    }\n\n    render() {\n        const { artists } = this.state;\n\n        return (\n            <div>\n              <h2>Top Artists</h2>\n                <table className=\"tl\">\n                  <tbody>\n                    {artists.map(({ imageUrl, artist, genres }, index) => (\n                    <tr key={index}>\n                        <td>\n                            <img src={imageUrl} alt='artist' height={100} width={100}/>\n                        </td>\n                        <td>\n                            <b>{artist}</b><br/>{genres.join(', ')}\n                        </td>\n                    </tr>\n                    )\n                    )}\n                  </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default TopArtists;\n","import React from 'react';\nimport './TableItem.css';\nimport { format, isThisWeek, isToday } from 'date-fns';\n\nconst formatTime = timestamp => {\n    const datePlayed = new Date(timestamp);\n    let outputFormat = 'E d.M.yyyy HH.mm';\n    if (isToday(datePlayed)) {\n        outputFormat = 'HH:mm';\n    } else if (isThisWeek(datePlayed)) {\n        outputFormat = 'E HH:mm';\n    }\n    return format(datePlayed, outputFormat);\n}\n\nconst TableItem = (item) => (\n      <tr key={item.played_at}>\n        <td><img src={item.image} alt='track' height={100} width={100}/></td>\n        <td><b>{item.track_name}</b><br/>{item.artist}</td>\n        <td>{formatTime(item.played_at)}</td>\n      </tr>\n    );\n\nexport default TableItem;","import React, { Component } from 'react';\nimport TableItem from './TableItem';\n\nclass RecentlyPlayed extends Component {\n    constructor() {\n        super();\n        this.state = {\n          recentlyPlayed: []\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:5000/history')\n          .then(res => res.json())\n          .then(data => {\n            this.setState({\n              recentlyPlayed: data\n            });\n          })\n          .catch(error => console.log(error));\n    }\n\n    render() {\n        const { recentlyPlayed } = this.state;\n        return (\n            <div className=\"tc\">\n                 <h2>Recently Played</h2>\n                 <table className=\"table tl\">\n                   <tbody>{recentlyPlayed.map((e, index) => TableItem(e, index))}</tbody>\n                 </table>\n               </div>\n        )\n    }\n}\n\nexport default RecentlyPlayed;\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport React from \"react\";\n\nimport TopArtists from \"../TopArtists/TopArtists\";\nimport RecentlyPlayed from '../RecentlyPlayed/RecentlyPlayed';\n\n\nconst Navigation = () => (\n    <Router>\n        <div>\n            <nav>\n              <NavLink to=\"/top-artists\">\n                  <span>Top Artists</span><br/>\n                  <span></span>\n              </NavLink>\n\n              <NavLink to=\"/top-tracks\">\n                  <span>Top Tracks</span><br/>\n              </NavLink>\n\n              <NavLink to=\"/recently-played\">\n                  <span>Recently Played</span>\n                  <span></span>\n              </NavLink>\n\n            </nav>\n        <Switch>\n          <Route path=\"/top-artists\">\n            <TopArtists />\n          </Route>\n          <Route path=\"/recently-played\">\n            <RecentlyPlayed />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n);\n\nexport default Navigation;\n","import React, { Component } from 'react';\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n          isSignedIn: []\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"tc\">\n                 <h2>Login</h2>\n                 <a href=\"http://localhost:5000/login\">Connect your Spotify account</a>\n               </div>\n        )\n    }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'url-search-params-polyfill';\nimport Navigation from './components/Navigation/Navigation';\nimport Login from \"./components/Login/Login\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    const urlParams = new URLSearchParams(window.location.search);\n    const isUserAuthorized = urlParams.has('authorized') ? true : false;\n\n    this.state = {\n      isUserAuthorized,\n      loading: true,\n      redirect: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:5000/checkToken')\n        .then(res => {\n          if (res.status === 200) {\n            this.setState({ loading: false });\n          } else {\n            const error = new Error(res.error);\n            throw error;\n          }\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({ loading: false, redirect: true });\n        });\n  }\n\n  render() {\n    const { loading, redirect } = this.state;\n      if (loading) {\n        return null;\n      }\n      if (redirect) {\n        return <Login />;\n      }\n      return <Navigation />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}